{% extends "viz/base.dtl" %}
{% load staticfiles %}
{% load i18n %}

{% block title %}{% trans 'Website Title' %}{% endblock %}

{% block head %}
<script src="https://d3js.org/d3.v4.min.js"></script>
{% endblock %}

{% block header %}
<h1 class="text-center">#NRW17 Ergebnisse Zeitverlauf</h1>
{% endblock %}

{% block content %}
<div id="chart">
</div>
<script>
var aut = d3.formatLocale({"decimal":",", "thousands":".","grouping":[3],"currency":["€", ""]});
var margin = { top: 20, right: 20, bottom: 30, left: 20 };
var width = parseInt(d3.select("#chart").style("width"), 10) - margin.left - margin.right;
var height = window.innerHeight - margin.top - margin.bottom - 20;

var noparty = ["date", "Wahlberechtigte", "abgegeben", "gueltig"];  //alle nicht-partei-felder
var meta = {"spoe": {"kurz": "SPÖ", "color": "#C83D44"}, "oevp": {"kurz": "ÖVP", "color": "#191919"}, "fpoe": {"kurz": "FPÖ", "color": "#2657A8"}, "gruene": {"kurz": "GRÜNE", "color": "#89A04F"}, "neos": {"kurz": "NEOS", "color": "#F52887"}, "kpoe": {"kurz": "KPÖ", "color": "#9F000F"}, "cpoe": {"kurz": "CPÖ", "color": "#E2E062"}, "pilz": {"kurz": "PILZ", "color": "#72BB72"}, "schnell": {"kurz": "SCHNELL", "color": "#5589A5"}, "gilt": {"kurz": "GILT", "color": "#E9AB17"}, "Sonstige 2013": {"kurz": "Sonstige 2013", "color": "#b0b0b0"}};  //parteikürzel und farben

var daten;
var lines = {};  //line-generators, einer pro partei
var parteien = [];

var tparse = d3.timeParse("%d.%m.%Y");  //datenformat umwandeln
var tformat = d3.timeFormat("%d.%m.%Y");

var timescale = d3.scaleTime().rangeRound([margin.left + 2, width - margin.right - 2]);
var yscale = d3.scaleLinear().domain([0, 1]).rangeRound([height - margin.top * 2, margin.bottom]);  //0-100%

var svg = d3.select("#chart")
	.append("svg")
	.attr("width", width + margin.left + margin.right)
	.attr("height", height + margin.top + margin.bottom)
	.attr("id", "svg")
	.append("g")
	.attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

var rsz;  //resize erst nach ende des resize
window.onresize = function()
	{
	clearTimeout(rsz);
	rsz = setTimeout(resize, 250);
	};

var q = d3.queue();
q.defer(d3.csv, "{% static 'nrws.csv' %}");

q.awaitAll(function(error)
	{
    if (!error) 
		{
		daten = arguments[1][0];
		for (var x in daten[0])
			{
			if (noparty.indexOf(x) == -1)
				{
				lines[x] = d3.line().x(function(d) { return timescale(tparse(d.date)); });
				parteien.push(x);
				}
			}
		timescale.domain([tparse(daten[0].date), tparse(daten[daten.length - 1].date)]);  //datum erste und letzte wahl

		draw();
		}
	});


function draw()
{
svg.append("g")  //achsen
	.attr("class", "yaxis")
	.attr("transform", "translate(" + (timescale.range()[0]) + "," + 0 + ")")
	.call(d3.axisLeft(yscale).tickSize(0).ticks(6).tickFormat(aut.format(",.0%")));

svg.append("g")
	.attr("class", "xaxis")
	.attr("transform", "translate(0," + (yscale.range()[0]) + ")")
	.call(d3.axisBottom(timescale).tickSize(0).tickValues(daten.map(function(d) { return tparse(d.date); })).tickFormat(tformat))
	.selectAll("text")
	.attr("dy", "0.25em")
	.attr("transform", "rotate(-90,3,3)");
	
svg.selectAll(".grid")  //gitterlinien
	.data(d3.range(0.05, yscale.domain()[1] + 0.05, 0.05))
	.enter()
	.append("line")
	.attr("x1", timescale.range()[0])
	.attr("x2", timescale.range()[1])
	.attr("y1", function(d) { return yscale(d); })
	.attr("y2", function(d) { return yscale(d); })
	.attr("class", "grid");

for (var i = 0, len = parteien.length; i < len; i++)
	{
	lines[parteien[i]].y(function(d) { return yscale(d[parteien[i]] / d.gueltig); });

	svg.append("path")
		.datum(daten)
		.attr("d", lines[parteien[i]])
		.attr("id", "tl_" + parteien[i])
		.style("stroke", meta[parteien[i]].color)
		.attr("class", "lines");
		
	svg.selectAll(".points")
		.data(daten)
		.enter()
		.append("circle")
		.attr("cx", function(d) { return timescale(tparse(d.date)); })
		.attr("cy", function(d) { return yscale(d[parteien[i]] / d.gueltig); })
		.attr("r", 3)
		.attr("class", function() { return "points_" + parteien[i]; })
		.style("stroke", function(d) { return meta[parteien[i]].color; })
		.style("fill", "#ffffff")
		.style("stroke-width", "2px");
	}
}


function resize()
{
width = parseInt(d3.select("#chart").style("width"), 10) - margin.left - margin.right;
height = window.innerHeight - margin.top - margin.bottom - 20;

timescale.rangeRound([margin.left + 2, width - margin.right - 2]);
yscale.rangeRound([height - margin.top * 2, margin.bottom]);

d3.select("#svg")
	.attr("width", width + margin.left + margin.right)
	.attr("height", height + margin.top + margin.bottom)
	.select("g")
	.attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
	
svg.select(".yaxis")  //achsen
	.attr("class", "yaxis")
	.attr("transform", "translate(" + (timescale.range()[0]) + "," + 0 + ")")
	.call(d3.axisLeft(yscale).tickSize(0).ticks(6).tickFormat(aut.format(",.0%")));

svg.select(".xaxis")
	.attr("transform", "translate(0," + (yscale.range()[0]) + ")")
	.call(d3.axisBottom(timescale).tickSize(0).tickValues(daten.map(function(d) { return tparse(d.date); })).tickFormat(tformat))
	.selectAll("text")
	.attr("dy", "0.25em")
	.attr("transform", "rotate(-90,3,3)");

svg.selectAll(".grid")
	.attr("x1", timescale.range()[0])
	.attr("x2", timescale.range()[1])
	.attr("y1", function(d) { return yscale(d); })
	.attr("y2", function(d) { return yscale(d); });

for (var i = 0, len = parteien.length; i < len; i++)
	{
	lines[parteien[i]].y(function(d) { return yscale(d[parteien[i]] / d.gueltig); });
	
	svg.select("#tl_" + parteien[i])
		.attr("d", lines[parteien[i]]);
		
	svg.selectAll(".points_" + parteien[i])
		.attr("cx", function(d) { return timescale(tparse(d.date)); })
		.attr("cy", function(d) { return yscale(d[parteien[i]] / d.gueltig); });
	}
}
</script>
</body>
{% endblock %}

{% block footer %}
{% endblock %}

